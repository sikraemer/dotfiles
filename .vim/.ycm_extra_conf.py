import os
import ycm_core

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.
DEFAULT_FLAGS = [
    '-Wall',
    '-Wextra',
    '-Werror',
    '-std=c++17',
    '-x', 'c++',
    '-isystem', '/usr/include/c++/7',
    '-isystem', '/usr/include/x86_64-linux-gnu/c++/7',
    '-isystem', '/usr/include/c++/7/backward',
    '-isystem', '/usr/local/include',
    '-isystem', '/usr/include/x86_64-linux-gnu',
    '-isystem', '/usr/include',
    '-I.'
]

SOURCE_EXTENSIONS = [ '.cpp', '.c', '.cc', '.cxx', '.m', '.mm' ]
HEADER_EXTENSIONS = [ '.hpp', '.h', '.hh', '.hxx' ]

# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags.
compilation_database_folder = ''
if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None


def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in HEADER_EXTENSIONS


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile( replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


# This is the entry point; this function is called by ycmd to produce flags for
# a file.
def FlagsForFile( filename, **kwargs ):
  if not database:
    return {
      'flags': DEFAULT_FLAGS,
      'include_paths_relative_to_dir': DirectoryOfThisScript()
    }

  compilation_info = GetCompilationInfoForFile( filename )
  if not compilation_info:
    return None

  # Bear in mind that compilation_info.compiler_flags_ does NOT return a
  # python list, but a "list-like" StringVec object.
  flags = list( compilation_info.compiler_flags_ )
  flags.append("-Wno-#warnings")
  return {
    'flags': flags,
    'include_paths_relative_to_dir': compilation_info.compiler_working_dir_
  }

